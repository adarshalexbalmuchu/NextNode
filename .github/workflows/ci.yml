name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

jobs:
  test:
    runs-on: ubuntu-latest
    name: Test & Quality Check

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Type check
        run: npm run type-check

      # TODO: Fix ESLint configuration issues
      # - name: Lint code
      #   run: npm run lint

      - name: Format check
        run: npm run format:check

      - name: Run tests
        run: npm run test:run

      - name: Run tests with coverage
        run: npm run test:coverage

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          file: ./coverage/lcov.info
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false

  build:
    runs-on: ubuntu-latest
    name: Build & Bundle Analysis
    needs: test

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build application
        run: npm run build

      - name: Analyze bundle size
        run: npm run build:analyze

      - name: Check bundle size limits
        run: |
          # Get the main bundle size (main entry point)
          MAIN_BUNDLE_SIZE=$(find dist/assets -name "index-*.js" -exec wc -c {} + | tail -1 | awk '{print $1}' 2>/dev/null || echo "0")
          MAIN_BUNDLE_SIZE_KB=$((MAIN_BUNDLE_SIZE / 1024))

          echo "Main bundle size: ${MAIN_BUNDLE_SIZE_KB}KB"

          # Set performance budgets
          MAX_MAIN_BUNDLE_KB=250
          MAX_CSS_BUNDLE_KB=65

          if [ $MAIN_BUNDLE_SIZE_KB -gt $MAX_MAIN_BUNDLE_KB ]; then
            echo "‚ùå Main bundle size (${MAIN_BUNDLE_SIZE_KB}KB) exceeds budget (${MAX_MAIN_BUNDLE_KB}KB)"
            exit 1
          else
            echo "‚úÖ Main bundle size (${MAIN_BUNDLE_SIZE_KB}KB) within budget (${MAX_MAIN_BUNDLE_KB}KB)"
          fi

          # Check CSS bundle size  
          CSS_BUNDLE_SIZE=$(find dist/css -name "index-*.css" -exec wc -c {} + | tail -1 | awk '{print $1}' 2>/dev/null || echo "0")
          CSS_BUNDLE_SIZE_KB=$((CSS_BUNDLE_SIZE / 1024))

          echo "CSS bundle size: ${CSS_BUNDLE_SIZE_KB}KB"

          if [ $CSS_BUNDLE_SIZE_KB -gt $MAX_CSS_BUNDLE_KB ]; then
            echo "‚ùå CSS bundle size (${CSS_BUNDLE_SIZE_KB}KB) exceeds budget (${MAX_CSS_BUNDLE_KB}KB)"
            exit 1
          else
            echo "‚úÖ CSS bundle size (${CSS_BUNDLE_SIZE_KB}KB) within budget (${MAX_CSS_BUNDLE_KB}KB)"
          fi

          echo "üéâ All bundle size checks passed!"

          echo "‚úÖ Bundle sizes are within performance budgets"

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-files
          path: dist/
          retention-days: 7

  lighthouse:
    runs-on: ubuntu-latest
    name: Lighthouse Performance Audit
    needs: build

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build for production
        run: npm run build

      - name: Serve built files
        run: |
          npm install -g serve
          serve -s dist -l 3000 &
          sleep 5

      - name: Run Lighthouse CI
        run: |
          npm install -g @lhci/cli@0.12.x
          lhci autorun
        env:
          LHCI_GITHUB_APP_TOKEN: ${{ secrets.LHCI_GITHUB_APP_TOKEN }}

  security:
    runs-on: ubuntu-latest
    name: Security Audit

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run security audit
        run: npm audit --audit-level high

      - name: Check for known vulnerabilities
        run: |
          npm install -g better-npm-audit
          better-npm-audit audit --level moderate --production
